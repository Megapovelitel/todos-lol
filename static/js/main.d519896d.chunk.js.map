{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["reducer","state","action","type","todos","title","value","completed","filter","i","idx","payload","map","App","useReducer","dispatch","className","onSubmit","e","preventDefault","onChange","target","length","style","textDecoration","margin","cursor","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAGMA,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,WACH,MAAO,CACLC,MAAM,GAAD,mBAAMH,EAAMG,OAAZ,CAAmB,CAAEC,MAAOJ,EAAMK,MAAOC,WAAW,KACzDD,MAAO,IAEX,IAAK,WACH,OAAO,2BACFL,GADL,IAEEG,MAAOH,EAAMG,MAAMI,QAAO,SAACC,EAAGC,GAAJ,OAAYA,IAAQR,EAAOS,aAEzD,IAAK,QACH,OAAO,2BACFV,GADL,IAEEK,MAAOJ,EAAOS,UAElB,IAAK,SACH,OAAO,2BACFV,GADL,IAEEG,MAAOH,EAAMG,MAAMQ,KAAI,SAACH,EAAGC,GAAJ,OACrBA,IAAQR,EAAOS,QAAf,2BAA8BF,GAA9B,IAAiCF,WAAYE,EAAEF,YAAcE,OAGnE,QACE,OAAOR,IAuDEY,MAnDf,WAAgB,IAAD,EACwBC,qBAAWd,EAAS,CACvDI,MAAO,GACPE,MAAO,KAHI,0BACJF,EADI,EACJA,MAAOE,EADH,EACGA,MAASS,EADZ,KAKb,OACE,sBAAKC,UAAU,MAAf,qBAEE,uBACEC,SAAU,SAACC,GACTA,EAAEC,iBACFJ,EAAS,CAAEZ,KAAM,cAHrB,UAME,uBACEG,MAAOA,EACPc,SAAU,SAACF,GAAD,OAAOH,EAAS,CAAEZ,KAAM,QAASQ,QAASO,EAAEG,OAAOf,WAE/D,8BACGF,EAAMkB,OAAS,EACZlB,EAAMQ,KAAI,SAACH,EAAGC,GACZ,OACE,sBAEEa,MAAO,CACLC,eAAgBf,EAAEF,UAAY,eAAiB,GAC/CkB,OAAQ,OACRC,OAAQ,WAEVC,QAAS,kBAAMZ,EAAS,CAAEZ,KAAM,SAAUQ,QAASD,KAPrD,UASGD,EAAEJ,MACH,wBACEF,KAAK,SACLwB,QAAS,SAACT,GACRA,EAAEC,iBACFJ,EAAS,CAAEZ,KAAM,WAAYQ,QAASD,KAJ1C,mBATKA,MAqBX,oBChECkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d519896d.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useReducer } from \"react\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"add-todo\":\n      return {\n        todos: [...state.todos, { title: state.value, completed: false }],\n        value: \"\",\n      };\n    case \"del-todo\":\n      return {\n        ...state,\n        todos: state.todos.filter((i, idx) => idx !== action.payload),\n      };\n    case \"field\":\n      return {\n        ...state,\n        value: action.payload,\n      };\n    case \"toggle\":\n      return {\n        ...state,\n        todos: state.todos.map((i, idx) =>\n          idx === action.payload ? { ...i, completed: !i.completed } : i\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  const [{ todos, value }, dispatch] = useReducer(reducer, {\n    todos: [],\n    value: \"\",\n  });\n  return (\n    <div className=\"App\">\n      TODO APP\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          dispatch({ type: \"add-todo\" });\n        }}\n      >\n        <input\n          value={value}\n          onChange={(e) => dispatch({ type: \"field\", payload: e.target.value })}\n        />\n        <div>\n          {todos.length > 0\n            ? todos.map((i, idx) => {\n                return (\n                  <div\n                    key={idx}\n                    style={{\n                      textDecoration: i.completed ? \"line-through\" : \"\",\n                      margin: \"10px\",\n                      cursor: \"pointer\",\n                    }}\n                    onClick={() => dispatch({ type: \"toggle\", payload: idx })}\n                  >\n                    {i.title}\n                    <button\n                      type=\"button\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        dispatch({ type: \"del-todo\", payload: idx });\n                      }}\n                    >\n                      Del\n                    </button>\n                  </div>\n                );\n              })\n            : \"No todos\"}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}